#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>


const char LETTERS[27] = {'A','B','C','D','E','F','G','H','I','J',
                          'K','L','M','N','O','P','Q','R','S','T',
						  'U','V','W','X','Y','Z', ' '};
const char ROTOR_VALUES[10] = {7, 3, 0, 1, 9, 5, 2, 6, 4, 8};
const int ROTOR_SIZE = 10;
const int TEXT_SIZE = 256;
int rotorPosition1, rotorPosition2, rotorPosition3;


/* findCharIndex:  Finds the location(index) of a character in the
    Letters array
 * Input:  Character to find in Letters Array
 * Output: Index location in the Letters Array
 * Note:  Returns -1 if not found
 */
int findCharIndex(char c)
{
    //TODO: Need to implement this function
    //Implementing this algorithm will only work for capital letters because of the const letters scope
    //will output negative signed ints if lowercase 
    char *ptr;
    int index; 
    ptr = strchr(LETTERS, c);
    
    index = ptr - LETTERS;
    return index;    //return the value 
}

/*  mod:  Implements a true modulus function
 *  INPUT: original number (a) and dividor (b)
 *  OUTPUT: remainder
 *  NOTE:  Required since in C (%) does not implement true modulus
 *         function for negative remainders   */
int mod(int a, int b)
{
    int r = a % b;
    return r < 0 ? r + b : r;
}


/* encryptLetter:  Returns an encrypted letter (character)
 * INPUT:  unencrypted letter (character) and key
 * OUTPUT:  encrypted letter   */
char encryptLetter(char unencrypted, int key){
    //TODO: Need to implement this function
    int encrypted = key + unencrypted; 
    if(encrypted < 27)
        encrypted = mod(encrypted, 27); //pass 27 as a hard value. 27 = size of array
	return LETTERS[encrypted];
}

/* decryptLetter:  Returns an decrypted letter (character)
 * INPUT:  encrypted letter (character) and key
 * OUTPUT:  decrypted letter  */
char decryptLetter(char unencrypted, int key){
    //TODO: Need to implement this function
    int decrypted = unencrypted - key;
    if(decrypted > 27)
    {
        decrypted = mod(decrypted, 27); //pass 27 as a hard value. 27 = size of array
        return LETTERS[decrypted];
    }
    else if(decrypted < 0)
    {
        int negMod;
        negMod = decrypted + 27; 
        return LETTERS[negMod];
    }

        
}

/* getKey: returns key based on current positions of the rotors  */
int getKey()
{
	return ROTOR_VALUES[rotorPosition1]+ROTOR_VALUES[rotorPosition2]+ROTOR_VALUES[rotorPosition3];
}

/* incrementRotors: Advances rotor positions by one
 * USAGE: Used after every letter is encrypted or decrypted  */
void incrementRotors()
{
	rotorPosition1++;
	if (rotorPosition1 == ROTOR_SIZE){
		rotorPosition1 = 0;
		rotorPosition2++;
	}
	if (rotorPosition2 == ROTOR_SIZE){
		rotorPosition2 = 0;
		rotorPosition3++;
	}
	if (rotorPosition3 == ROTOR_SIZE)
		rotorPosition3 = 0;
}



int main( int argc, char *argv[] )
{
	//STEP #1: Get and check Command Line Arguments
	//TODO:  Implement this step
	    if (argc != 5){
        printf("ERROR - wrong number of command line arguments\n");
        return EXIT_FAILURE;
    }
    
    //turn cmd args into integers 
    rotorPosition1 = atoi(argv[1]);
    rotorPosition2 = atoi(argv[2]);
    rotorPosition3 = atoi(argv[3]);
    
    printf("rotor1: %d\n",rotorPosition1);
    printf("rotor2: %d\n",rotorPosition2);
    printf("rotor3: %d\n",rotorPosition3);
    
    //turn the string input from cmd into a char value 
    char crypt = argv[4][0];
    printf("encryption or decryption: %c\n", crypt);
    
    //function call to get the key 
    
    
    //STEP #2: Get text string from user
	char inputText[TEXT_SIZE];
	char outputText[TEXT_SIZE];
	scanf( "%[^\n]s" , inputText ); 		//%20 includes spaces
	printf("Input text supplied is: %s\n", inputText);
    int input_text_size = strlen(inputText) - 1; 	//minus 1 to ignore \n char

    int key; 

    //STEP #3: For each letter, encrypt or decrypt
    int i=0;
    for (i=0;i<=input_text_size;i++)
    {
        
        key = getKey(); //call the getkey function inside the loop since you need to iterate it for each pass
        
        printf("Pass: %d\n", i+1);
        printf("Key: %d\n",key);
        //TODO:  Implement this step
        
        if(crypt == 'e')
        {
            //encrypt sequence
            findCharIndex(inputText[i]);
            outputText[i] = encryptLetter(findCharIndex(inputText[i]), key);
            printf("Index: %d\n",findCharIndex(inputText[i]));
            printf("Unencrypted letter: %c\n",inputText[i]);
            printf("Encrypted (key + index): %c\n", outputText[i]);
            printf("\n");
            incrementRotors(); //need to call this function every iteration
        }
        if(crypt == 'd')
        {
            //decrypt sequence 
            findCharIndex(inputText[i]);
            outputText[i] = decryptLetter(findCharIndex(inputText[i]), key); 
            printf("Index: %d\n",findCharIndex(inputText[i]));
            printf("Undecrypted letter: %c\n",inputText[i]);
            printf("Decrypted letter (index - key): %c\n", outputText[i]);
            printf("\n");
            incrementRotors(); //need to call this function every iteration
        }

        
	}

    //STEP #4: Print result
	outputText[input_text_size+1] = '\0';
	printf("Output text: %s\n", outputText);

	return EXIT_SUCCESS;
}
